import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { Plus, Calendar, Percent, DollarSign, Gift, MoreHorizontal, Edit, Trash2, BarChart3 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useToast } from "@/hooks/use-toast";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { format } from "date-fns";
import { ptBR } from "date-fns/locale";
import type { Campaign, InsertCampaign } from "@shared/schema";
import CampaignStatistics from "@/admin/components/campaign-statistics";

export default function CampaignsPage() {
  const [isCreateOpen, setIsCreateOpen] = useState(false);
  const [editingCampaign, setEditingCampaign] = useState<Campaign | null>(null);
  const { toast } = useToast();

  const { data: campaigns, isLoading } = useQuery({
    queryKey: ["/api/admin/campaigns"],
    throwOnError: false,
  });

  const createMutation = useMutation({
    mutationFn: (data: InsertCampaign) =>
      apiRequest("POST", "/api/admin/campaigns", data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/campaigns"] });
      setIsCreateOpen(false);
      toast({ title: "Campanha criada com sucesso" });
    },
  });

  const updateMutation = useMutation({
    mutationFn: ({ id, data }: { id: number; data: Partial<Campaign> }) =>
      apiRequest("PATCH", `/api/admin/campaigns/${id}`, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/campaigns"] });
      setEditingCampaign(null);
      toast({ title: "Campanha atualizada com sucesso" });
    },
  });

  const deleteMutation = useMutation({
    mutationFn: (id: number) =>
      apiRequest("DELETE", `/api/admin/campaigns/${id}`),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/campaigns"] });
      toast({ title: "Campanha removida com sucesso" });
    },
  });

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>, isEdit = false) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    
    const data = {
      name: formData.get("name") as string,
      description: formData.get("description") as string,
      discountType: formData.get("discountType") as string,
      discountValue: parseFloat(formData.get("discountValue") as string),
      couponCode: formData.get("couponCode") as string,
      validFrom: formData.get("validFrom") ? new Date(formData.get("validFrom") as string) : null,
      validUntil: formData.get("validUntil") ? new Date(formData.get("validUntil") as string) : null,
      usageLimit: formData.get("usageLimit") ? parseInt(formData.get("usageLimit") as string) : null,
      isActive: formData.get("isActive") === "on",
    };

    if (isEdit && editingCampaign) {
      updateMutation.mutate({ id: editingCampaign.id, data });
    } else {
      createMutation.mutate(data);
    }
  };

  const getDiscountIcon = (type: string) => {
    switch (type) {
      case "percentage":
        return <Percent className="h-4 w-4" />;
      case "fixed_amount":
        return <DollarSign className="h-4 w-4" />;
      case "free_trial":
        return <Gift className="h-4 w-4" />;
      default:
        return <Gift className="h-4 w-4" />;
    }
  };

  const formatDiscount = (campaign: Campaign) => {
    if (campaign.discountType === "percentage") {
      return `${campaign.discountValue}%`;
    } else if (campaign.discountType === "fixed_amount") {
      return `${campaign.discountValue} Kz`;
    } else {
      return "Trial gratuito";
    }
  };

  const isExpired = (campaign: Campaign) => {
    return campaign.validUntil && new Date(campaign.validUntil) < new Date();
  };

  const CampaignForm = ({ campaign, onSubmit, isPending }: { 
    campaign?: Campaign; 
    onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;
    isPending: boolean;
  }) => (
    <form onSubmit={onSubmit} className="space-y-4">
      <div>
        <Label htmlFor="name">Nome da Campanha</Label>
        <Input 
          id="name" 
          name="name" 
          required 
          defaultValue={campaign?.name}
          placeholder="Promoção de Lançamento"
        />
      </div>
      <div>
        <Label htmlFor="description">Descrição</Label>
        <Textarea 
          id="description" 
          name="description" 
          defaultValue={campaign?.description || ""}
          placeholder="Descrição da campanha promocional"
        />
      </div>
      <div>
        <Label htmlFor="discountType">Tipo de Desconto</Label>
        <Select name="discountType" defaultValue={campaign?.discountType || "percentage"}>
          <SelectTrigger>
            <SelectValue placeholder="Selecione o tipo" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="percentage">Percentual</SelectItem>
            <SelectItem value="fixed_amount">Valor Fixo</SelectItem>
            <SelectItem value="free_trial">Trial Gratuito</SelectItem>
          </SelectContent>
        </Select>
      </div>
      <div>
        <Label htmlFor="discountValue">Valor do Desconto</Label>
        <Input 
          id="discountValue" 
          name="discountValue" 
          type="number" 
          step="0.01"
          required 
          defaultValue={campaign?.discountValue?.toString()}
          placeholder="10"
        />
      </div>
      <div>
        <Label htmlFor="couponCode">Código do Cupom</Label>
        <Input 
          id="couponCode" 
          name="couponCode" 
          defaultValue={campaign?.couponCode || ""}
          placeholder="PROMO2025"
        />
      </div>
      <div className="grid grid-cols-2 gap-4">
        <div>
          <Label htmlFor="validFrom">Válido de</Label>
          <Input 
            id="validFrom" 
            name="validFrom" 
            type="datetime-local"
            defaultValue={campaign?.validFrom ? 
              new Date(campaign.validFrom).toISOString().slice(0, 16) : ""
            }
          />
        </div>
        <div>
          <Label htmlFor="validUntil">Válido até</Label>
          <Input 
            id="validUntil" 
            name="validUntil" 
            type="datetime-local"
            defaultValue={campaign?.validUntil ? 
              new Date(campaign.validUntil).toISOString().slice(0, 16) : ""
            }
          />
        </div>
      </div>
      <div>
        <Label htmlFor="usageLimit">Limite de Uso</Label>
        <Input 
          id="usageLimit" 
          name="usageLimit" 
          type="number" 
          defaultValue={campaign?.usageLimit?.toString()}
          placeholder="100"
        />
      </div>
      <div className="flex items-center space-x-2">
        <input 
          type="checkbox" 
          id="isActive" 
          name="isActive" 
          defaultChecked={campaign?.isActive ?? true}
        />
        <Label htmlFor="isActive">Ativo</Label>
      </div>
      <Button type="submit" disabled={isPending}>
        {isPending ? "Salvando..." : campaign ? "Atualizar" : "Criar Campanha"}
      </Button>
    </form>
  );

  if (isLoading) {
    return <div className="p-6">Carregando campanhas...</div>;
  }

  return (
    <div className="p-6 space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Campanhas e Promoções</h1>
          <p className="text-muted-foreground">
            Crie e gerencie campanhas promocionais e cupons de desconto
          </p>
        </div>
        <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              Nova Campanha
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Criar Nova Campanha</DialogTitle>
              <DialogDescription>
                Configure uma nova campanha promocional ou cupom de desconto
              </DialogDescription>
            </DialogHeader>
            <CampaignForm 
              onSubmit={(e) => handleSubmit(e, false)}
              isPending={createMutation.isPending}
            />
          </DialogContent>
        </Dialog>
      </div>

      <Tabs defaultValue="campaigns" className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="campaigns">Campanhas</TabsTrigger>
          <TabsTrigger value="statistics">
            <BarChart3 className="mr-2 h-4 w-4" />
            Estatísticas
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="campaigns" className="space-y-4">
          <CampaignsList />
        </TabsContent>
        
        <TabsContent value="statistics" className="space-y-4">
          <CampaignStatistics />
        </TabsContent>
      </Tabs>
    </div>
  );

  function CampaignsList() {
    return (
      <div className="grid gap-4">
        {campaigns?.map((campaign) => (
          <Card key={campaign.id}>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-blue-50 rounded-lg">
                    <Gift className="h-5 w-5 text-blue-600" />
                  </div>
                  <div>
                    <CardTitle className="text-lg">{campaign.name}</CardTitle>
                    <div className="flex items-center gap-2 mt-1">
                      <Badge variant={campaign.isActive ? "default" : "secondary"}>
                        {campaign.isActive ? "Ativa" : "Inativa"}
                      </Badge>
                      {campaign.discountType === 'percentage' && (
                        <Badge variant="outline" className="flex items-center gap-1">
                          <Percent className="h-3 w-3" />
                          {campaign.discountValue}%
                        </Badge>
                      )}
                      {campaign.discountType === 'fixed_amount' && (
                        <Badge variant="outline" className="flex items-center gap-1">
                          <DollarSign className="h-3 w-3" />
                          {campaign.discountValue} Kz
                        </Badge>
                      )}
                    </div>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" size="sm">
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end">
                      <DropdownMenuItem onClick={() => setEditingCampaign(campaign)}>
                        <Edit className="mr-2 h-4 w-4" />
                        Editar
                      </DropdownMenuItem>
                      <DropdownMenuItem 
                        onClick={() => deleteMutation.mutate(campaign.id)}
                        className="text-destructive"
                      >
                        <Trash2 className="mr-2 h-4 w-4" />
                        Remover
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
              </div>
            </CardHeader>
            <CardContent className="space-y-3">
              {campaign.description && (
                <p className="text-sm text-muted-foreground">{campaign.description}</p>
              )}
              
              {campaign.couponCode && (
                <div className="flex items-center justify-between bg-muted p-2 rounded">
                  <span className="text-sm font-mono">{campaign.couponCode}</span>
                  <Badge variant="outline">Cupom</Badge>
                </div>
              )}
              
              <div className="grid grid-cols-2 gap-2 text-sm">
                {campaign.usageCount !== undefined && campaign.usageLimit && (
                  <div>
                    <span className="text-muted-foreground">Usos:</span>
                    <span className="ml-1 font-medium">
                      {campaign.usageCount}/{campaign.usageLimit}
                    </span>
                  </div>
                )}
                {campaign.validFrom && (
                  <div>
                    <span className="text-muted-foreground">De:</span>
                    <span className="ml-1 font-medium">
                      {format(new Date(campaign.validFrom), "dd/MM/yy", { locale: ptBR })}
                    </span>
                  </div>
                )}
                {campaign.validUntil && (
                  <div>
                    <span className="text-muted-foreground">Até:</span>
                    <span className="ml-1 font-medium">
                      {format(new Date(campaign.validUntil), "dd/MM/yy", { locale: ptBR })}
                    </span>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {campaigns?.length === 0 && (
        <div className="text-center py-8">
          <p className="text-muted-foreground">Nenhuma campanha encontrada</p>
        </div>
      )}
    </div>
  );
}
